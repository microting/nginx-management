// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NginxManagement.Infrastructure.Data;

namespace NginxManagement.Migrations
{
    [DbContext(typeof(NginxManagemenDbContext))]
    [Migration("20200701064427_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NginxManagement.Infrastructure.Data.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("NginxManagement.Infrastructure.Data.Entities.PluginConfigurationValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 123, DateTimeKind.Local).AddTicks(1754),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:ServiceAccessToken",
                            UpdatedByUserId = 0,
                            Value = "",
                            Version = 1,
                            WorkflowState = "created"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 148, DateTimeKind.Local).AddTicks(5498),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:Host",
                            UpdatedByUserId = 0,
                            Value = "microting.com",
                            Version = 1,
                            WorkflowState = "created"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 148, DateTimeKind.Local).AddTicks(5581),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:AccessLogTemplate",
                            UpdatedByUserId = 0,
                            Value = "/var/log/nginx/nginx.{0}.access.log",
                            Version = 1,
                            WorkflowState = "created"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 148, DateTimeKind.Local).AddTicks(5594),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:ErrorLogTemplate",
                            UpdatedByUserId = 0,
                            Value = "/var/log/nginx/nginx.{0}.error.log",
                            Version = 1,
                            WorkflowState = "created"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 148, DateTimeKind.Local).AddTicks(5605),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:PostExecuteCommand",
                            UpdatedByUserId = 0,
                            Value = "/etc/init.d/nginx reload",
                            Version = 1,
                            WorkflowState = "created"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 7, 1, 9, 44, 27, 148, DateTimeKind.Local).AddTicks(5616),
                            CreatedByUserId = -1,
                            Name = "BaseSettings:DestinationPath",
                            UpdatedByUserId = 0,
                            Value = "/etc/nginx/sites-enabled/",
                            Version = 1,
                            WorkflowState = "created"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
